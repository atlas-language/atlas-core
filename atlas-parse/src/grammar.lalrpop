use crate::lexer::Token;
use ordered_float::NotNan;

use crate::ast::*;

grammar<'src>;

extern {
    enum Token<'src> {
        " " => Token::Whitespace(<&'src str>),
        "line_comment" => Token::LineComment(<&'src str>),
        "block_comment" => Token::BlockComment(<&'src str>),

        "true" => Token::True,
        "false" => Token::False,
        "integer" => Token::Integer(<u64>),
        "string" => Token::String(<&'src str>),
        "float" => Token::Float(<NotNan<f64>>),

        "enum" => Token::Enum,
        "fn" => Token::Fn,
        "let" => Token::Let,
        "if" => Token::If,
        "else" => Token::Else,
        "match" => Token::Match,

        "pub" => Token::Pub,
        "rec" => Token::Rec,

        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,

        "." => Token::Dot,
        "," => Token::Comma,
        ":" => Token::Colon,
        ";" => Token::Semicolon,

        "=" => Token::Equals,

        "-" => Token::Minus,

        "operator" => Token::Operator(<&'src str>),
        "identifier" => Token::Identifier(<&'src str>),
        "type_identifier" => Token::TypeIdentifier(<&'src str>),

        "start_expr" => Token::StartExpr,
        "start_module" => Token::StartModule,
        "start_repl" => Token::StartRepl,

        "unknown" => Token::Unknown(<&'src str>)
    }
}

// Will match any token
AnyToken : Token<'src> = {
    " " => Token::Whitespace(<>),
    "line_comment" => Token::LineComment(<>),
    "block_comment" => Token::BlockComment(<>),

    "true" => Token::True,
    "false" => Token::False,
    "integer" => Token::Integer(<>),
    "float" => Token::Float(<>),

    "enum" => Token::Enum,
    "fn" => Token::Fn,
    "let" => Token::Let,
    "if" => Token::If,
    "else" => Token::Else,
    "match" => Token::Match,

    "pub" => Token::Pub,
    "rec" => Token::Rec,

    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "[" => Token::LBracket,
    "]" => Token::RBracket,

    "." => Token::Dot,
    "," => Token::Comma,
    ":" => Token::Colon,
    ";" => Token::Semicolon,

    "=" => Token::Equals,

    "-" => Token::Minus,

    "operator" => Token::Operator(<>),
    "identifier" => Token::Identifier(<>),
    "unknown" => Token::Unknown(<>)
}

WS = {
    " ",
    "line_comment",
    "block_comment"
}

// Type expresions

Type : Type<'src> = {
    "identifier" => Type::Identifier(<>),
    "type_identifier" => Type::Identifier(<>)
}

// Pattern expressions

Pattern : Pattern<'src> = {
    "identifier" => Pattern::Identifier(<>),
    <pat:Pattern> WS* ":" WS* <type_:Type> => Pattern::Typed(Box::new(pat), type_)
}

Literal : Literal<'src> = {
    "integer" => Literal::Integer(<> as i64),
    "float" => Literal::Float(<>),
    "string" => Literal::String(<>),
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false),
    "(" ")" => Literal::Unit
}


Field : (&'src str, Expr<'src>) = {
    <i:"identifier"> WS* ":" <e:Expr> => (i,e)
}

IfElse : IfElse<'src> = {
    "if" " " <cond: Expr> "{" 
        WS* <if_expr: Expr>
    "}" WS* "else" WS* "{" WS* <else_expr: Expr> "}" =>
        IfElse { cond, if_expr, else_expr }
}

Match : Match<'src> = {
    "match" => todo!()
}

Atom : Expr<'src> = {
    Literal => Expr::Literal(<>),
    "(" WS* <e:Expr> ")" => e,
    "identifier" => Expr::Identifier(<>),
    ExprBlock => Expr::Block(Box::new(<>)),

    IfElse => Expr::IfElse(Box::new(<>)),
    Match => Expr::Match(Box::new(<>)),

    // Tuple
    "(" <mut elems: (WS* <Expr>",")+> WS* <e:Expr?> ")" =>  {
        if let Some(e) = e { elems.push(e); }
        Expr::Tuple(Tuple { fields: elems })
    },
    // List
    "[" <mut elems:(WS* <Expr> ",")*> WS* <e:Expr?>"]" => {
        if let Some(e) = e { elems.push(e); }
        Expr::List(List { elems })
    }
}

Constructor : Constructor<'src> = {
    <t:"type_identifier"> => Constructor::Empty(t),
    <t:"type_identifier"> WS* "(" <mut elems:(WS* <Expr> ",")*> WS* <e:Expr?> ")" => {
        if let Some(e) = e { elems.push(e); }
        Constructor::Tuple(t, elems)
    },
    <t:"type_identifier"> WS* "{" <mut fields:(WS* <Field> ",")*> WS* <e:Field?> "}" => {
        if let Some(e) = e { fields.push(e); }
        Constructor::Struct(t, fields)
    }
}

// An Expr may have trailing whitespace
Term : Expr<'src> = {
    <Atom> WS* => <>,
    // Non-compact method call
    <func:Term> "(" <mut args:(WS* <Expr> ",")*> WS* <last: Expr?>")" WS* => {
        if let Some(l) = last { args.push(l); }
        Expr::Call(Box::new(func), args)
    },
    // Non-compact project operation
    <t:Term> "." WS* <ident:"identifier"> WS* =>
        Expr::Project(Box::new(t), ident),

    // Non-compact index operation
    <t:Term> "[" WS* <i:Term> "]" WS* =>
        Expr::Index(Box::new(t), Box::new(i)),
}

Operator : &'src str = {
    "-" => "-",
    "operator" => <>
}

Expr: Expr<'src> = {
    Term => <>,
    <ops:(<Operator> WS*)+> <e:Term> => {
        let mut x = e;
        for op in ops {
            x = Expr::Unary(op, Box::new(x))
        }
        x
    },
    // We allow multiple operators here, the others are interpreted
    // as unary operators applied to the RHS expression
    <lhs:Expr> <op:Operator> WS* <uops:(<Operator> WS*)*> <mut r:Term> => {
        for op in &uops {
            r = Expr::Unary(op, Box::new(r))
        }
        match lhs {
            Expr::Infix(i) => {
                let Infix { lhs: l, mut rhs } = *i;
                rhs.push((op, r));
                Expr::Infix(Box::new(Infix { lhs: l, rhs }))
            },
            _ => Expr::Infix(Box::new(Infix { lhs, rhs: vec![(op, r)] }))
        }
    },
}

// Exprblocks may only have rec
ExprBlock : ExprBlock<'src> = {
    // "{" <decls: Declaration*> <value: Expr> "}" => 
    //     ExprBlock {  decls, value: Some(value) }
    "{" WS* <value: Expr> "}" => 
        ExprBlock {  decls: vec![], value: Some(value) }
}

// Function body can be empty
// in which case unit is returned
FunBody: ExprBlock<'src> = {
    "{" <decls: Declaration*> <value: Expr?> "}" => 
        ExprBlock {  decls, value }
}

Modifier : Modifier = {
    "pub" WS* => Modifier::Pub
}

LetDecl: LetDecl<'src> = {
    WS* <modifier:Modifier?> "let" " "? <pattern:Pattern> WS* "=" 
                WS* <value:Expr> => 
        LetDecl { modifier, pattern, value }
}

FnDecl: FnDecl<'src> = {
    WS* <modifier:Modifier?> "fn" " "? <name:"identifier"> 
            "(" <mut args:(WS* <Pattern> WS* ",")*> WS* <last: (<Pattern> WS*)?> ")" 
            WS* <body: FunBody> => {
        if let Some(l) = last {
            args.push(l);
        }
        FnDecl{ modifier, name, args, body }
    }
}

// EnumDecl: EnumDecl<'src> = {
//     <modifier:(<Modifier> WS*)?> "enum" " "? <name:"type_identifier"> "{" 
//     "}"
// }

Declaration: Declaration<'src> = {
    <LetDecl> ";" => Declaration::Let(<>),
    <FnDecl> => Declaration::Fn(<>)
}

Module : Module<'src> = {
    <decls: Declaration*> WS* => Module { decls }
}

ReplDeclaration: Declaration<'src> = {
    <LetDecl> ";"? => Declaration::Let(<>),
    <FnDecl> => Declaration::Fn(<>)
}

ReplInput : ReplInput<'src> = {
    <ReplDeclaration> => ReplInput::Declaration(<>),
    // <Expr> => ReplInput::Expr(<>),
}

pub Input : Input<'src> = {
    "start_repl" <ReplInput> => Input::Repl(<>),
    // "start_expr" WS* <Expr> => Input::Expr(<>),
    // "start_module" WS* <Module> => Input::Module(<>)
}