use ordered_float::NotNan;

use crate::parse::ast::{
    Literal,
    Expr, Pattern, Parameter, Arg, ItemPattern,
    Field, LetDeclare, FnDeclare,
    Declaration, Module, Scope, BlockDeclare, DeclareModifier,
    Span, ByteIndex,
    ReplInput
};

// use crate::value::storage::ObjPointer;

use crate::parse::lexer::{
    Token,
    StringLiteral, LexicalError
};

grammar<'src>;

extern {
    type Error = LexicalError;
    type Location = ByteIndex;
    enum Token<'src> {
        "doc" => Token::Doc(<&'src str>),
        "identifier" => Token::Identifier(<&'src str>),
        "constructor" => Token::Constructor(<&'src str>),
        "macro" => Token::Macro(<&'src str>),
        "operator" => Token::Operator(<&'src str>),
        "unary operator" => Token::UnaryOperator(<&'src str>),
        "-" => Token::Minus, // special because both operator/unary operator

        "string literal" => Token::StringLiteral(<StringLiteral<'src>>),
        "char literal" => Token::CharLiteral(<char>),

        "int literal" => Token::IntLiteral(<i64>),
        "float literal" => Token::FloatLiteral(<NotNan<f64>>),

        "bool literal" => Token::BoolLiteral(<bool>),

        "let" => Token::Let,
        "in" => Token::In,
        "and" => Token::And,

        "pub" => Token::Pub,
        "rec" => Token::Rec,
        "cache" => Token::Cache,

        "fn" => Token::Fn,

        "match" => Token::Match,
        "with" => Token::With,

        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,

        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "::" => Token::DoubleColon,
        "," => Token::Comma,

        "." => Token::Dot,
        "*" => Token::Star,
        "**" => Token::StarStar,
        "***" => Token::StarStarStar,
        "$" => Token::Cash,
        "#" => Token::Hash,
        "%" => Token::Percent,
        "=>" => Token::MatchTo,
        "=" => Token::Equals,
        "|" => Token::Pipe,
        "->" => Token::RArrow,
        "<-" => Token::LArrow,
        "?" => Token::Question,
        "~" => Token::Tilde,
        "@" => Token::At,
        "&" => Token::Ampersand,

        "_" => Token::Underscore,

        "(" => Token::LParen,
        ")" => Token::RParen,

        "{" => Token::LBrace,
        "}" => Token::RBrace,

        "[" => Token::LBracket,
        "]" => Token::RBracket,

        "begin" => Token::Begin,
        "end" => Token::End
    }
}

// General utilities

// Can have 0 elements/1 element 0 separators
Sep<Rule, Separator>: Vec<Rule> =
    <mut rules: (<Rule> Separator)*> <last: Rule?> => {
        match last {
        Some(l) => rules.push(l),
        None => ()
        };
        rules
    };

// Does not allow trailing separator
SepStrict<Rule, Separator>: Vec<Rule> =
    <mut rules: (<Rule> Separator)*> <last: Rule> => {
        rules.push(last);
        rules
    };

// requires at least one separator
SepMulti<Rule, Separator> : Vec<Rule> =
    <mut rules: (<Rule> Separator)+> <last: Rule?> => {
        match last {
        Some(l) => rules.push(l),
        None => ()
        };
        rules
    };

// 1-any number of elements,
// trailing comma allowed
// i.e for lists [a], [a,], [a,b], [a,b,]
Comma<Rule>: Vec<Rule> = {
    Sep<Rule, ",">
};

CommaStrict<Rule>: Vec<Rule> = {
    SepStrict<Rule, ",">
};

// at least 1 comma required,
// i.e a,
CommaMulti<Rule>: Vec<Rule> = {
    SepMulti<Rule, ",">
};

// identifiers and constructors are the same thing
// everywhere but for patterns, where a is an identifier
// and Foo is a constructor
Identifier : &'src str = {
    "identifier" => <>,
    "constructor" => <>
}

Literal: Literal<'src> = {
    "string literal" => Literal::String(<>),
    "char literal" => Literal::Char(<>),
    "int literal" => Literal::Int(<>),
    "float literal" => Literal::Float(<>),
    "bool literal" => Literal::Bool(<>)
}

ItemPattern : ItemPattern<'src> = {
    <l:@L> "**" <ident:"identifier"?> <r:@R> => 
        ItemPattern::Expansion(Span::new(l, r), ident),
    <l:@L> <pattern:Pattern> <r:@R> => 
        ItemPattern::Simple(Span::new(l, r), pattern)
}

ConstructorPatternArgs : Vec<Pattern<'src>> = {
    "(" <params:Comma<Pattern>> ")" => params
}

Pattern : Pattern<'src> = {
    // <l:@L> <ident:"constructor"> <params:ConstructorPatternArgs?> <r:@R> =>
    //     match params {
    //         None => Pattern::Variant(Span::new(l, r), ident, Vec::new()),
    //         Some(ps) => Pattern::Variant(Span::new(l, r), ident, ps)
    //     },
    // <l:@L> "_" <r:@R> =>
    //     Pattern::Hole(Span::new(l, r)),
    // Note: cannot bind identifier
    // expect as directionary keys using shorthand notation
    // i.e let {Bar} = {Bar: f}
    // will bind Bar to f
    // let Bar = f
    // will do a pattern match on f with variant case Bar!
    <l:@L> <ident:"identifier"> <r:@R> =>
        Pattern::Identifier(Span::new(l, r), ident),
    // <l:@L> <lit:Literal> <r:@R> => Pattern::Literal(Span::new(l, r), lit),
    // <l:@L> "[" <items:Comma<ItemPattern>> "]" <r:@R> => Pattern::List(Span::new(l, r), items)
}

// Expressions
Parameter : Parameter<'src> = {
    <l:@L> <ident:"identifier"> <r:@R> =>
        Parameter::Named(Span::new(l, r), ident)
    // <l:@L> "**" <ident:"identifier"?> <r:@R> =>
    //     Parameter::VarPos(Span::new(l, r), ident),
    // <l:@L> "***" <ident:"identifier"?> <r:@R> =>
    //     Parameter::VarKeys(Span::new(l, r), ident),
    // <l:@L> <ident:"identifier"> "?" <r:@R> =>
    //     Parameter::Optional(Span::new(l, r), ident)
}

Arg : Arg<'src> = {
    <l:@L> <e:Expr> <r:@R> => 
        Arg::Pos(Span::new(l, r), e),
    <l:@L> <ident:"identifier"> ":" <e:Expr> <r:@R> => 
        Arg::ByName(Span::new(l, r), ident, e),
}

SimpleField : Field<'src> = {
    <l:@L> <key:Expr> <m:@R> ":" <v:Expr>  =>
        Field::Simple(Span::new(l, m), key, v)
}

ExpandField : Field<'src> = {
    <l:@L> "***" <e:Expr> <r:@R>  =>
        Field::Expansion(Span::new(l, r), e)
}

Field : Field<'src> = {
    SimpleField, ExpandField
}

// a @ (| x , y | (x  @ 1))
// 1 + | x, y | x + y

Record : Expr<'src> = {
    // Braces are complicated since { a } could be either a record
    // or a scope. Therefore we require record literals starting with Default
    // fields to include a comma i.e { a } is a scope and { a, } is a record
    <l:@L> "{" "}" <r:@R> => {
        Expr::Record(Span::new(l, r), Vec::new())
    },
    <l:@L> "{" "," "}" <r:@R> => {
        Expr::Record(Span::new(l, r), Vec::new())
    },
    <l:@L> "{" <first:SimpleField> <mut fields:("," <Field>)*> ","? "}" <r:@R> => {
        fields.insert(0, first);
        Expr::Record(Span::new(l, r), fields)
    },
    <l:@L> "{" <first:ExpandField> <mut fields:("," <Field>)*> ","? "}" <r:@R> => {
        fields.insert(0, first);
        Expr::Record(Span::new(l, r), fields)
    },
}

Scope : Scope<'src> = {
    <l:@L> "{" <decl:Declaration*> <e:Expr?> "}" <r:@R> => {
        let span = Span::new(l, r);
        Scope{
            span, 
            decl, 
            expr: Box::new(e.unwrap_or(Expr::Literal(span, Literal::Unit)))
        }
    }
}

NonEmptyScope : Expr<'src> = {
    <l:@L> "{" <decl:Declaration*> <e:Expr> "}" <r:@R> => 
        Expr::Scope(
            Scope{
                span: Span::new(l, r), 
                decl, 
                expr: Box::new(e)
            }
        )
}

IfElse : Expr<'src> = {
    <l:@L> "if" <cond: Expr> <suc: Scope> <elif:("else" "if" Expr Scope)+> <last:("else" Scope)?> <r:@R> => {
        let mut else_clause = match last {
            Some((_, s)) => Some(Box::new(Expr::Scope(s))),
            None => None
        };
        for (_, _, c, s) in elif.into_iter().rev() {
            else_clause = Some(Box::new(Expr::IfElse(Span::new(l, r), Box::new(c), Box::new(Expr::Scope(s)), else_clause)));
        }
        Expr::IfElse(Span::new(l, r), Box::new(cond), Box::new(Expr::Scope(suc)), else_clause)
    },
}



// MatchCase : (Pattern<'src>, Expr<'src>) = {
//     <p:Pattern> "=>" <e:Expr> => (p, e)
// }

// Match : Expr<'src> = {
//     <l:@L> "match" <scrutinized:Expr> "with" "{" <cases: Comma<MatchCase>> "}" <r:@R> => 
//         Expr::Match(Span::new(l, r), Box::new(scrutinized), cases)
// }

Builtin : Expr<'src> = {
    <l:@L> "$" <iden:Identifier> "(" <entries:Comma<Expr>> ")" <r:@R> =>
        Expr::Builtin(Span::new(l, r), iden, entries)
}

// All closed construction expressions
AtomicExpr : Expr<'src> = {
    <l:@L> <ident:Identifier> <r:@R> => Expr::Identifier(Span::new(l, r), ident),
    <l:@L> <lit:Literal> <r:@R> => Expr::Literal(Span::new(l, r), lit),
    <l:@L> "(" ")" <r:@R> => Expr::Literal(Span::new(l, r), Literal::Unit),
    <l:@L> "[" <entries:Comma<Expr>> "]" <r:@R> =>
        Expr::List(Span::new(l, r), entries),

    // both . and :: project
    <l:@L> <e:AtomicExpr> "." <ident:Identifier> <r:@R> =>
        Expr::Project(Span::new(l, r), Box::new(e), ident),
    <l:@L> <e:AtomicExpr> "::" <ident:Identifier> <r:@R> =>
        Expr::Project(Span::new(l, r), Box::new(e), ident),

    // function calls (both () versions and {} version)
    <l:@L> <lam:AtomicExpr> "(" <args:Comma<Arg>> ")" <r:@R> =>
        Expr::Call(Span::new(l, r), Box::new(lam), args),
    // closed anonymous functions
    // fn(a, b) {}
    // this allows for 0-argument functions, whereas the |x| syntax does not
    // since || is the "or" operator
    <l:@L> "fn" "(" <params:Comma<Parameter>> ")" <s:Scope> <r:@R> =>
        Expr::Lambda(Span::new(l, r), params, Box::new(Expr::Scope(s))),

    Record,
    NonEmptyScope, // must be non-empty to not be confused with a record {}
    IfElse,
    Builtin,

    // if there is a comma it is a tuple, i.e  (1 + 1,) vs (1 + 1)
    <l:@L> "(" <parts:CommaMulti<Expr>> ")" <r:@R> => 
        Expr::Tuple(Span::new(l, r), parts),
    <l:@L> "(" "," ")" <r:@R> => 
        Expr::Tuple(Span::new(l, r), Vec::new()),
    // wraping an expression in () 
    "(" <exp: Expr> ")" => exp
}

// Anonymous functions
OpenLamExpr : Expr<'src> = {
    <l:@L> "|" <params: Comma<Parameter>> "|" <e: Expr> <r:@R> =>
        Expr::Lambda(Span::new(l, r), params, Box::new(e))
}

PrefixOperator : &'src str = {
    "unary operator" => <>,
    "-" => "-"
}

PrefixExpr : Expr<'src> = {
    AtomicExpr,
    <l:@L> <op:PrefixOperator> <arg:PrefixExpr> <r:@R> =>
        Expr::Prefix(Span::new(l, r), op, Box::new(arg))
}

// To prevent ambiguities this is a lambda
// expression with some number of prefixes.
// an Infix expression can that way only handle a lambda
// expression if it is at the end
OpenLamPrefixExpr : Expr<'src> = {
    OpenLamExpr,
    <l:@L> <op:PrefixOperator> <arg:OpenLamPrefixExpr> <r:@R> =>
        Expr::Prefix(Span::new(l, r), op, Box::new(arg))
}

// a binary operator can |, -
// in addition to things the lexer calls an "operator"
// @ is handled separately since there we need to allow
// named args, etc
InfixOperator : &'src str = {
    "|" => "|",
    "-" => "-",
    "operator" => <>
}

InfixExpr : Expr<'src> = {
    <l:@L> <parts:(PrefixExpr InfixOperator)+> <last:PrefixExpr> <r:@R> => {
        let mut args = Vec::new();
        let mut ops = Vec::new();
        for (exp, op) in parts {
            args.push(exp);
            ops.push(op);
        }
        args.push(last);
        Expr::Infix(Span::new(l, r), args, ops)
    },
    <l:@L> <parts:(PrefixExpr InfixOperator)+> <last:OpenLamPrefixExpr> <r:@R> => {
        let mut args = Vec::new();
        let mut ops = Vec::new();
        for (exp, op) in parts {
            args.push(exp);
            ops.push(op);
        }
        args.push(last);
        Expr::Infix(Span::new(l, r), args, ops)
    }
}

pub Expr : Expr<'src> = {
    InfixExpr,
    PrefixExpr,
    OpenLamPrefixExpr
}

LetDeclare: LetDeclare<'src> = {
    <l:@L> <mods: DeclareModifier*> "let" <pattern: Pattern> "=" <binding:Expr> ";" <r:@R> => 
        LetDeclare{
            span: Span::new(l, r),
            mods,
            pattern,
            binding
        }
}
TLLetDeclare: LetDeclare<'src> = {
    <l:@L> <mods: DeclareModifier*> "let" <pattern: Pattern> "=" <binding:Expr> (";"?) <r:@R> => 
        LetDeclare{
            span: Span::new(l, r),
            mods,
            pattern,
            binding
        }
}

FnDeclare: FnDeclare<'src> = {
    <l:@L> <mods: DeclareModifier*> "fn" <name: "identifier"> "(" <params:Comma<Parameter>> ")" <scope:Scope> <r:@R> =>
        FnDeclare{
            span: Span::new(l, r),
            mods,
            name,
            params,
            scope: Expr::Scope(scope)
        },
    <l:@L> <mods: DeclareModifier*> "fn" "(" <op: InfixOperator> ")" "(" <params:Comma<Parameter>> ")" <scope:Scope> <r:@R> =>
        FnDeclare{
            span: Span::new(l, r),
            mods,
            name: op,
            params,
            scope: Expr::Scope(scope)
        }
}

BlockDeclare: BlockDeclare<'src> = {
    <l:@L> <mods: DeclareModifier+> "{" <decls: Declaration*> "}" <r:@R> =>
        BlockDeclare{
            span: Span::new(l, r),
            mods,
            decls
        }
}

DeclareModifier : DeclareModifier = {
    "pub" => DeclareModifier::Pub,
    "rec" => DeclareModifier::Rec,
    "cache" => DeclareModifier::Cache
}

Declaration : Declaration<'src> = {
    <dec: LetDeclare> => Declaration::Let(dec),
    <dec: FnDeclare> => Declaration::Fn(dec),
    <dec: BlockDeclare> => Declaration::Block(dec),
}

TLDeclaration : Declaration<'src> = {
    <dec: TLLetDeclare> => Declaration::Let(dec),
    <dec: FnDeclare> => Declaration::Fn(dec),
    <dec: BlockDeclare> => Declaration::Block(dec),
}


pub Module : Module<'src> = {
    <l:@L> <decl: TLDeclaration*> <r:@R> => {
        Module{span: Span::new(l, r), decl}
    }
}

CommandToken : &'src str = {
    "identifier" => <>
}

pub ReplInput : ReplInput<'src> = {
    <decl: TLDeclaration> => ReplInput::Decl(decl),
    <exp: Expr> <discard:";"?> => ReplInput::Expr(exp, discard.is_some()),
    "%" <token: CommandToken> <expr: Expr?> => ReplInput::Command(token, expr),
}
